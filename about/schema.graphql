# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Job {
  id: ID!
  employer: String
  employerSite: String
  title: String
  bio: String
  startDate: CalendarDay
  endDate: CalendarDay
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input JobWhereUniqueInput {
  id: ID
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: IDFilter
  employer: StringFilter
  employerSite: StringFilter
  title: StringFilter
  bio: StringFilter
  startDate: CalendarDayFilter
  endDate: CalendarDayNullableFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input JobOrderByInput {
  id: OrderDirection
  employer: OrderDirection
  employerSite: OrderDirection
  title: OrderDirection
  bio: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input JobUpdateInput {
  employer: String
  employerSite: String
  title: String
  bio: String
  startDate: CalendarDay
  endDate: CalendarDay
}

input JobUpdateArgs {
  where: JobWhereUniqueInput!
  data: JobUpdateInput!
}

input JobCreateInput {
  employer: String
  employerSite: String
  title: String
  bio: String
  startDate: CalendarDay
  endDate: CalendarDay
}

type About {
  id: ID!
  jobs(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  minibios(where: MiniBioWhereInput! = {}, orderBy: [MiniBioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MiniBioWhereUniqueInput): [MiniBio!]
  minibiosCount(where: MiniBioWhereInput! = {}): Int
  staticLinks(where: StaticLinkWhereInput! = {}, orderBy: [StaticLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StaticLinkWhereUniqueInput): [StaticLink!]
  staticLinksCount(where: StaticLinkWhereInput! = {}): Int
}

input AboutWhereUniqueInput {
  id: ID
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  jobs: JobManyRelationFilter
  minibios: MiniBioManyRelationFilter
  staticLinks: StaticLinkManyRelationFilter
}

input JobManyRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input MiniBioManyRelationFilter {
  every: MiniBioWhereInput
  some: MiniBioWhereInput
  none: MiniBioWhereInput
}

input StaticLinkManyRelationFilter {
  every: StaticLinkWhereInput
  some: StaticLinkWhereInput
  none: StaticLinkWhereInput
}

input AboutOrderByInput {
  id: OrderDirection
}

input AboutUpdateInput {
  jobs: JobRelateToManyForUpdateInput
  minibios: MiniBioRelateToManyForUpdateInput
  staticLinks: StaticLinkRelateToManyForUpdateInput
}

input JobRelateToManyForUpdateInput {
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input MiniBioRelateToManyForUpdateInput {
  disconnect: [MiniBioWhereUniqueInput!]
  set: [MiniBioWhereUniqueInput!]
  create: [MiniBioCreateInput!]
  connect: [MiniBioWhereUniqueInput!]
}

input StaticLinkRelateToManyForUpdateInput {
  disconnect: [StaticLinkWhereUniqueInput!]
  set: [StaticLinkWhereUniqueInput!]
  create: [StaticLinkCreateInput!]
  connect: [StaticLinkWhereUniqueInput!]
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput! = {id: 1}
  data: AboutUpdateInput!
}

input AboutCreateInput {
  jobs: JobRelateToManyForCreateInput
  minibios: MiniBioRelateToManyForCreateInput
  staticLinks: StaticLinkRelateToManyForCreateInput
}

input JobRelateToManyForCreateInput {
  create: [JobCreateInput!]
  connect: [JobWhereUniqueInput!]
}

input MiniBioRelateToManyForCreateInput {
  create: [MiniBioCreateInput!]
  connect: [MiniBioWhereUniqueInput!]
}

input StaticLinkRelateToManyForCreateInput {
  create: [StaticLinkCreateInput!]
  connect: [StaticLinkWhereUniqueInput!]
}

type StaticLink {
  id: ID!
  title: String
  href: String
}

input StaticLinkWhereUniqueInput {
  id: ID
}

input StaticLinkWhereInput {
  AND: [StaticLinkWhereInput!]
  OR: [StaticLinkWhereInput!]
  NOT: [StaticLinkWhereInput!]
  id: IDFilter
  title: StringFilter
  href: StringFilter
}

input StaticLinkOrderByInput {
  id: OrderDirection
  title: OrderDirection
  href: OrderDirection
}

input StaticLinkUpdateInput {
  title: String
  href: String
}

input StaticLinkUpdateArgs {
  where: StaticLinkWhereUniqueInput!
  data: StaticLinkUpdateInput!
}

input StaticLinkCreateInput {
  title: String
  href: String
}

type MiniBio {
  id: ID!
  name: String
}

input MiniBioWhereUniqueInput {
  id: ID
}

input MiniBioWhereInput {
  AND: [MiniBioWhereInput!]
  OR: [MiniBioWhereInput!]
  NOT: [MiniBioWhereInput!]
  id: IDFilter
  name: StringFilter
}

input MiniBioOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input MiniBioUpdateInput {
  name: String
}

input MiniBioUpdateArgs {
  where: MiniBioWhereUniqueInput!
  data: MiniBioUpdateInput!
}

input MiniBioCreateInput {
  name: String
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Folder {
  id: ID!
  title: String
  isRoot: Boolean
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  subfolders(where: FolderWhereInput! = {}, orderBy: [FolderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FolderWhereUniqueInput): [Folder!]
  subfoldersCount(where: FolderWhereInput! = {}): Int
}

input FolderWhereUniqueInput {
  id: ID
}

input FolderWhereInput {
  AND: [FolderWhereInput!]
  OR: [FolderWhereInput!]
  NOT: [FolderWhereInput!]
  id: IDFilter
  title: StringFilter
  files: FileManyRelationFilter
  subfolders: FolderManyRelationFilter
}

input FileManyRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input FolderManyRelationFilter {
  every: FolderWhereInput
  some: FolderWhereInput
  none: FolderWhereInput
}

input FolderOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input FolderUpdateInput {
  title: String
  files: FileRelateToManyForUpdateInput
  subfolders: FolderRelateToManyForUpdateInput
}

input FileRelateToManyForUpdateInput {
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FolderRelateToManyForUpdateInput {
  disconnect: [FolderWhereUniqueInput!]
  set: [FolderWhereUniqueInput!]
  create: [FolderCreateInput!]
  connect: [FolderWhereUniqueInput!]
}

input FolderUpdateArgs {
  where: FolderWhereUniqueInput!
  data: FolderUpdateInput!
}

input FolderCreateInput {
  title: String
  files: FileRelateToManyForCreateInput
  subfolders: FolderRelateToManyForCreateInput
}

input FileRelateToManyForCreateInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FolderRelateToManyForCreateInput {
  create: [FolderCreateInput!]
  connect: [FolderWhereUniqueInput!]
}

type File {
  id: ID!
  title: String
  file: FileFieldOutput
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  title: StringFilter
}

input FileOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input FileUpdateInput {
  title: String
  file: FileFieldInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  title: String
  file: FileFieldInput
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createJob(data: JobCreateInput!): Job
  createJobs(data: [JobCreateInput!]!): [Job]
  updateJob(where: JobWhereUniqueInput!, data: JobUpdateInput!): Job
  updateJobs(data: [JobUpdateArgs!]!): [Job]
  deleteJob(where: JobWhereUniqueInput!): Job
  deleteJobs(where: [JobWhereUniqueInput!]!): [Job]
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput! = {id: 1}, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput! = {id: 1}): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createStaticLink(data: StaticLinkCreateInput!): StaticLink
  createStaticLinks(data: [StaticLinkCreateInput!]!): [StaticLink]
  updateStaticLink(where: StaticLinkWhereUniqueInput!, data: StaticLinkUpdateInput!): StaticLink
  updateStaticLinks(data: [StaticLinkUpdateArgs!]!): [StaticLink]
  deleteStaticLink(where: StaticLinkWhereUniqueInput!): StaticLink
  deleteStaticLinks(where: [StaticLinkWhereUniqueInput!]!): [StaticLink]
  createMiniBio(data: MiniBioCreateInput!): MiniBio
  createMiniBios(data: [MiniBioCreateInput!]!): [MiniBio]
  updateMiniBio(where: MiniBioWhereUniqueInput!, data: MiniBioUpdateInput!): MiniBio
  updateMiniBios(data: [MiniBioUpdateArgs!]!): [MiniBio]
  deleteMiniBio(where: MiniBioWhereUniqueInput!): MiniBio
  deleteMiniBios(where: [MiniBioWhereUniqueInput!]!): [MiniBio]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createFolder(data: FolderCreateInput!): Folder
  createFolders(data: [FolderCreateInput!]!): [Folder]
  updateFolder(where: FolderWhereUniqueInput!, data: FolderUpdateInput!): Folder
  updateFolders(data: [FolderUpdateArgs!]!): [Folder]
  deleteFolder(where: FolderWhereUniqueInput!): Folder
  deleteFolders(where: [FolderWhereUniqueInput!]!): [Folder]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  job(where: JobWhereUniqueInput!): Job
  jobs(where: JobWhereInput! = {}, orderBy: [JobOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobWhereUniqueInput): [Job!]
  jobsCount(where: JobWhereInput! = {}): Int
  about(where: AboutWhereUniqueInput! = {id: 1}): About
  abouts(where: AboutWhereInput! = {id: {equals: 1}}, orderBy: [AboutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AboutWhereUniqueInput): [About!]
  aboutsCount(where: AboutWhereInput! = {id: {equals: 1}}): Int
  staticLink(where: StaticLinkWhereUniqueInput!): StaticLink
  staticLinks(where: StaticLinkWhereInput! = {}, orderBy: [StaticLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StaticLinkWhereUniqueInput): [StaticLink!]
  staticLinksCount(where: StaticLinkWhereInput! = {}): Int
  miniBio(where: MiniBioWhereUniqueInput!): MiniBio
  miniBios(where: MiniBioWhereInput! = {}, orderBy: [MiniBioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MiniBioWhereUniqueInput): [MiniBio!]
  miniBiosCount(where: MiniBioWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  folder(where: FolderWhereUniqueInput!): Folder
  folders(where: FolderWhereInput! = {}, orderBy: [FolderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FolderWhereUniqueInput): [Folder!]
  foldersCount(where: FolderWhereInput! = {}): Int
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
